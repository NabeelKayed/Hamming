/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hamming;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author hp
 */
public class Hamming extends javax.swing.JFrame {

    /**
     * Creates new form CRC
     */
    public Hamming() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Data = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        withOutError = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        withError = new javax.swing.JButton();
        hammingCode = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        recievedData = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        recievedCode = new javax.swing.JLabel();
        errorPosition = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        sendData = new javax.swing.JLabel();
        Percentage = new javax.swing.JLabel();
        Percentage1 = new javax.swing.JLabel();
        recievedCodeCorrected = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        recievedDatacorrected = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        numberOfParityBits = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Data");

        Data.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Hamming code for error detection and correction");

        withOutError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        withOutError.setText("Send with out error");
        withOutError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withOutErrorActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Hamming Code");

        withError.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        withError.setText("Send with single error");
        withError.setMaximumSize(new java.awt.Dimension(125, 23));
        withError.setMinimumSize(new java.awt.Dimension(125, 23));
        withError.setPreferredSize(new java.awt.Dimension(125, 23));
        withError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withErrorActionPerformed(evt);
            }
        });

        hammingCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hammingCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Recieved Code");

        recievedData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        recievedData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Recieved Data");

        recievedCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        recievedCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        errorPosition.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorPosition.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Error Position");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Send Data");

        sendData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sendData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Percentage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Percentage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Percentage1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Percentage1.setText("Percentage of correcting error");

        recievedCodeCorrected.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        recievedCodeCorrected.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Recieved Code corrected");

        recievedDatacorrected.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        recievedDatacorrected.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Recieved Data corrected");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("Resever side:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Transmiter side:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Number of parity bits");

        numberOfParityBits.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numberOfParityBits.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(23, 23, 23)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(withOutError, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(withError, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                                        .addComponent(Data)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(40, 40, 40))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Percentage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Percentage, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                        .addComponent(recievedDatacorrected, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                        .addComponent(recievedCodeCorrected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(recievedData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(errorPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(recievedCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12))
                                    .addGap(20, 20, 20)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(hammingCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sendData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(numberOfParityBits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(withOutError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(withError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sendData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numberOfParityBits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hammingCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(recievedCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(recievedData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Percentage1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(recievedCodeCorrected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recievedDatacorrected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Percentage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static boolean IsPowerTwo(int num) {
        int Falg = num & num - 1;
        return Falg == 0;
    }
    private void withOutErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withOutErrorActionPerformed
        // TODO add your handling code here:
        String n = "";
        int parity = 1;
        int j = 0;
        if (Data.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the data please");
            return;
        }
        char[] data = Data.getText().toCharArray();
        for (int i = 0; i < data.length; i++) {
            if (data[i] != '1' && data[i] != '0') {
                JOptionPane.showMessageDialog(this, "You should enter binary data only");
                return;
            }
        }
        int dataSize = data.length;
        while (true) {
            if (dataSize + parity + 1 <= Math.pow(2, parity)) {
                break;
            }
            parity++;
        }
        int massageSize = dataSize + parity;
        numberOfParityBits.setText("" + parity);

        int[] transmitedData = new int[massageSize + 1];
        int[] resevedCode = new int[massageSize + 1];
        int[] temp = new int[massageSize + 1];
        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                continue;
            }
            transmitedData[i] = Integer.parseInt(data[j] + "");
            j++;
        }
        for (int i = 0; i < parity; i++) {
            int x = (int) Math.pow(2, i);
            for (int k = 1; k < transmitedData.length; k++) {
                if ((x & k) != 0) {
                    if (x != k) {
                        transmitedData[x] = transmitedData[x] ^ transmitedData[k];
                    }
                }
            }
        }

        sendData.setText(Data.getText());
        for (int i = 1; i <= massageSize; i++) {
            n += transmitedData[i];
        }
        hammingCode.setText(n);
        for (int i = 1; i <= massageSize; i++) {
            resevedCode[i] = transmitedData[i];
        }
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            n += resevedCode[i];
        }
        recievedCode.setText(n);
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            if (!IsPowerTwo(i)) {
                n += resevedCode[i];
            }
        }
        recievedData.setText(n);
        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                temp[i] = resevedCode[i];
            }
        }

        for (int i = 0; i < parity; i++) {
            int x = (int) Math.pow(2, i);
            for (int k = 1; k < resevedCode.length; k++) {
                if ((x & k) != 0) {
                    if (x != k) {
                        resevedCode[x] = resevedCode[x] ^ resevedCode[k];
                    }
                }
            }
        }
        String binaryString = "";
        for (int i = massageSize; i >= 1; i--) {
            if (IsPowerTwo(i)) {
                binaryString += resevedCode[i];
            }
        }
        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                resevedCode[i] = temp[i];
            }
        }
        int p = Integer.parseInt(binaryString, 2);
        if (p == 0) {
            errorPosition.setText("No error");
            Percentage.setText("0.0%");
        } else {
            errorPosition.setText("Error at " + p);
            double parsantage = (double) 1 * 100 / (double) (massageSize);
            String parsantage1 = String.format("%.2f", parsantage);
            Percentage.setText(parsantage1 + "%");
            if (resevedCode[p] == 1) {
                resevedCode[p] = 0;
            } else {
                resevedCode[p] = 1;
            }
        }
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            n += resevedCode[i];
        }
        recievedCodeCorrected.setText(n);
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            if (!IsPowerTwo(i)) {
                n += resevedCode[i];
            }
        }
        recievedDatacorrected.setText(n);
    }//GEN-LAST:event_withOutErrorActionPerformed

    private void withErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withErrorActionPerformed
        // TODO add your handling code here:
        String n = "";
        int parity = 1;
        int j = 0;
        if (Data.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the data please");
            return;
        }
        char[] data = Data.getText().toCharArray();
        
        for (int i = 0; i < data.length; i++) {
            if (data[i] != '1' && data[i] != '0') {
                JOptionPane.showMessageDialog(this, "You should enter binary data only");
                return;
            }
        }
        int dataSize = data.length;
        while (true) {
            if (dataSize + parity + 1 <= Math.pow(2, parity)) {
                break;
            }
            parity++;
        }
        numberOfParityBits.setText("" + parity);
        int massageSize = dataSize + parity;
        int[] transmitedData = new int[massageSize + 1];
        int[] resevedCode = new int[massageSize + 1];
        int[] temp = new int[massageSize + 1];

        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                continue;
            }
            transmitedData[i] = Integer.parseInt(data[j] + "");
            j++;
        }
        for (int i = 0; i < parity; i++) {
            int x = (int) Math.pow(2, i);
            for (int k = 1; k < transmitedData.length; k++) {
                if ((x & k) != 0) {
                    if (x != k) {
                        transmitedData[x] = transmitedData[x] ^ transmitedData[k];
                    }
                }
            }
        }

        sendData.setText(Data.getText());
        for (int i = 1; i <= massageSize; i++) {
            n += transmitedData[i];
        }
        hammingCode.setText(n);

        for (int i = 1; i <= massageSize; i++) {
            resevedCode[i] = transmitedData[i];
        }

        Random R = new Random();
        int Random = R.nextInt(massageSize);

        while (Random == 0) {
            Random = R.nextInt(massageSize);
        }

        if (resevedCode[Random] == 0) {
            resevedCode[Random] = 1;
        } else {
            resevedCode[Random] = 0;
        }
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            n += resevedCode[i];
        }
        recievedCode.setText(n);
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            if (!IsPowerTwo(i)) {
                n += resevedCode[i];
            }
        }
        recievedData.setText(n);
        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                temp[i] = resevedCode[i];
            }
        }
        for (int i = 0; i < parity; i++) {
            int x = (int) Math.pow(2, i);
            for (int k = 1; k < resevedCode.length; k++) {
                if ((x & k) != 0) {
                    if (x != k) {
                        resevedCode[x] = resevedCode[x] ^ resevedCode[k];
                    }
                }
            }
        }
        String binaryString = "";
        for (int i = massageSize; i >= 1; i--) {
            if (IsPowerTwo(i)) {
                binaryString += resevedCode[i];
            }
        }

        for (int i = 1; i <= massageSize; i++) {
            if (IsPowerTwo(i)) {
                resevedCode[i] = temp[i];
            }
        }
        
        int p = Integer.parseInt(binaryString, 2);
        
        if (p == 0) {
            errorPosition.setText("No error");
            Percentage.setText("0.0%");
        } else {
            errorPosition.setText("Error at " + p);
            double parsantage = (double) 1 * 100 / (double) (massageSize);
            String parsantage1 = String.format("%.2f", parsantage);
            Percentage.setText(parsantage1 + "%");
            if (resevedCode[p] == 1) {
                resevedCode[p] = 0;
            } else {
                resevedCode[p] = 1;
            }
        }
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            n += resevedCode[i];
        }
        recievedCodeCorrected.setText(n);
        n = "";
        for (int i = 1; i <= massageSize; i++) {
            if (!IsPowerTwo(i)) {
                n += resevedCode[i];
            }
        }
        recievedDatacorrected.setText(n);
    }//GEN-LAST:event_withErrorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Hamming h = new Hamming();
            h.setVisible(true);
            h.setLocation(350, 100);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Data;
    private javax.swing.JLabel Percentage;
    private javax.swing.JLabel Percentage1;
    private javax.swing.JLabel errorPosition;
    private javax.swing.JLabel hammingCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel numberOfParityBits;
    private javax.swing.JLabel recievedCode;
    private javax.swing.JLabel recievedCodeCorrected;
    private javax.swing.JLabel recievedData;
    private javax.swing.JLabel recievedDatacorrected;
    private javax.swing.JLabel sendData;
    private javax.swing.JButton withError;
    private javax.swing.JButton withOutError;
    // End of variables declaration//GEN-END:variables
}
